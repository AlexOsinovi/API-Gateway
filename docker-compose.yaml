services:
  auth-db:
    image: postgres:15
    container_name: auth-db
    environment:
      POSTGRES_DB: auth_service_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  order-db:
    image: postgres:15
    container_name: order-db
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - app-network

  user-redis:
    image: redis:7
    container_name: user-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD : ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    volumes:
      - mongodb-container-data:/data/db
      - mongodb-container-config:/data/configdb
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped
    entrypoint: ["docker-entrypoint.sh"]
    command: ["mongod"]

  auth-service:
    image: aliakseiasinavy/auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/auth_service_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION}
    depends_on:
      - auth-db
    networks:
      - app-network

  user-service:
    image: aliakseiasinavy/user-service
    container_name: user-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/user_service_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_REDIS_HOST: user-redis
      SPRING_REDIS_PORT: 6379
    depends_on:
      - user-db
      - user-redis
    networks:
      - app-network

  order-service:
    image: aliakseiasinavy/order-service
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_service_db
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      ORDER_USER_SERVICE_URL: ${ORDER_USER_SERVICE_URL}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - order-db
      - kafka
    networks:
      - app-network

  payment-service:
    build:
      context: ../Payment-Service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "8085:8085"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_HOST : ${MONGO_INITDB_HOST}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      RANDOM_API_URL: ${RANDOM_API_URL}
    depends_on:
      - mongodb
      - kafka
    networks:
      - app-network

  gateway:
    build: .
    container_name: gateway
    ports:
      - "8083:8083"
    environment:
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      USER_SERVICE_URL: ${USER_SERVICE_URL}
      ORDER_SERVICE_URL: ${ORDER_SERVICE_URL}
      PAYMENT_SERVICE_URL: ${PAYMENT_SERVICE_URL}
      SPRING_BOOT_DEBUG: true
    depends_on:
      - auth-service
      - user-service
      - order-service
      - payment-service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth-db-data:
  user-db-data:
  order-db-data:
  redis-data:
  kafka_data:
  mongodb-container-data:
  mongodb-container-config: